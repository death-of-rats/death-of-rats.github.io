<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Death Of Rats</title><link>https://death-of-rats.github.io/</link><description>The end of my mind...</description><atom:link href="https://death-of-rats.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 death-of-rats 
&lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;&lt;img alt="Creative Commons Licence" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.</copyright><lastBuildDate>Sun, 11 Nov 2018 00:48:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Icon 2018 CTF third challenge</title><link>https://death-of-rats.github.io/posts/icon_2018_ctf_third_challenge/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;p&gt;The third challenge is a reverse engineering problem. The zipped package contains 3 files:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;crackme_baby
crackme.py
run.sh
&lt;/pre&gt;


&lt;p&gt;Python file contains definitions of simple math operations (add, sub, mul, div2, mod, inf). Let us
 disassemble crackme_baby file.&lt;/p&gt;
&lt;p&gt;Main function shows us that 2 long variables are in play, &lt;code&gt;d1 = 25052671110843108&lt;/code&gt; 
 and &lt;code&gt;d2 = 16420105858350620421142892712&lt;/code&gt;. They are passed to &lt;code&gt;calc_flag__object___object&lt;/code&gt; to calculate 
value for the flag. This value is hashed with sha256 and print in format flag{&lt;em&gt;hashed_value&lt;/em&gt;}.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.0x000021c3&lt;/span&gt;      &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;                    &lt;span class="c1"&gt;; main(int argc, char** argv)&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021c4&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021c7&lt;/span&gt;      &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbx&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021c8&lt;/span&gt;      &lt;span class="nv"&gt;sub&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x88&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021cf&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;dword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_84h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;edi&lt;/span&gt;  &lt;span class="c1"&gt;; argc&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021d5&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_90h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;  &lt;span class="c1"&gt;; argv&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021dc&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nb"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mh"&gt;0x28&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;; [0x28:8]=0x6108 ; '('&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021e5&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_18h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021e9&lt;/span&gt;      &lt;span class="nv"&gt;xor&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021eb&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.Py_Initialize&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021f0&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xa&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021f5&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;.0x000021fa&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;str.25052671110843108&lt;/span&gt; &lt;span class="c1"&gt;; 0x2aa0 ; "25052671110843108"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002201&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyLong_FromString&lt;/span&gt;       &lt;span class="c1"&gt;; create python long object&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002206&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_78h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;           &lt;span class="c1"&gt;; here we have d1&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000220a&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xa&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000220f&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002214&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;str.16420105858350620421142892712&lt;/span&gt; &lt;span class="c1"&gt;; 0x2ab2 ; "16420105858350620421142892712"&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000221b&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyLong_FromString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002220&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_70h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;           &lt;span class="c1"&gt;; here we have d2&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002224&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_70h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002228&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_78h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000222c&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000222f&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002232&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.calc_flag__object___object&lt;/span&gt; &lt;span class="c1"&gt;; compute the value for the flag&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002237&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_68h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000223b&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;str.flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;_flag&lt;/span&gt; &lt;span class="c1"&gt;; 0x2ad0 ; "flag: flag{"  &lt;/span&gt;
&lt;span class="nf"&gt;.0x00002242&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;obj._ZSt4cout__GLIBCXX_3.4&lt;/span&gt; &lt;span class="c1"&gt;; 0x204020&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002249&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;operator___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char____charconst&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000224e&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002251&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_68h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; get computed value&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002255&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002258&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyLong_AsLong&lt;/span&gt; &lt;span class="c1"&gt;; convert Python object to long&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000225d&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002260&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_60h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002264&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002267&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000226a&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;__cxx11&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;to_string_long&lt;/span&gt; &lt;span class="c1"&gt;; long -&amp;gt; string&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000226f&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_40h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; buffer for sha256 result&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002273&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_60h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; string with the computed long value&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002277&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000227a&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000227d&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.sha256_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;__cxx11&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_string_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char__std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;al&lt;/span&gt;&lt;span class="nv"&gt;locator_char&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002282&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_40h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; we will print sha256 hash&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002286&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002289&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rbx&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000228c&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;operator___char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char__std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;al&lt;/span&gt;&lt;span class="nv"&gt;locator_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char____std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;__cxx11&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_string_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char__std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;al&lt;/span&gt;&lt;span class="nv"&gt;locator_char__const&lt;/span&gt;
&lt;span class="nf"&gt;.0x00002291&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002adc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "}" &lt;/span&gt;
&lt;span class="nf"&gt;.0x00002298&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x0000229b&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;operator___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char___std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;basic_ostream_char_std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;ch&lt;/span&gt;&lt;span class="nv"&gt;ar_traits_char____charconst&lt;/span&gt;
&lt;span class="nf"&gt;.0x000022a0&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
                  &lt;span class="nf"&gt;...&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So it's time to look closer at function &lt;code&gt;calc_flag__object___object&lt;/code&gt;. First instructions just load &lt;code&gt;crackme.py&lt;/code&gt; 
and import math functions: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.0x00001e83&lt;/span&gt;      &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;                               
&lt;span class="nf"&gt;.0x00001e84&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;                
&lt;span class="nf"&gt;.0x00001e87&lt;/span&gt;      &lt;span class="nv"&gt;sub&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x70&lt;/span&gt;               &lt;span class="c1"&gt;; 'p'&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001e8b&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_68h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;  &lt;span class="c1"&gt;; d1&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001e8f&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_70h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;  &lt;span class="c1"&gt;; d2&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001e93&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;str.crackme&lt;/span&gt;  &lt;span class="c1"&gt;; 0x2a7f ; "crackme"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001e9a&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyUnicode_FromString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001e9f&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_48h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ea3&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_48h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ea7&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;                           
&lt;span class="nf"&gt;.0x00001eaa&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyImport_Import&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eaf&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_40h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;             
&lt;span class="nf"&gt;.0x00001eb3&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_40h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eb7&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eba&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyModule_GetDict&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ebf&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ec3&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ec7&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002a87&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "add"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ece&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ed1&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ed6&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_30h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eda&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ede&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002a8b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "sub"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ee5&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ee8&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eed&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_28h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ef1&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001ef5&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002a8f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "mul"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001efc&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001eff&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f04&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_20h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f08&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f0c&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="nv"&gt;str.div2&lt;/span&gt;     &lt;span class="c1"&gt;; 0x2a93 ; "div2"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f13&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f16&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f1b&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_18h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f1f&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f23&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002a98&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "mod"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f2a&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f2d&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f32&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_10h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f36&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_38h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f3a&lt;/span&gt;      &lt;span class="nv"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00002a9c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; "sup"&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f41&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f44&lt;/span&gt;      &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;sym.imp.PyDict_GetItemString&lt;/span&gt;
&lt;span class="nf"&gt;.0x00001f49&lt;/span&gt;      &lt;span class="nv"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local_8h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;From above code we can extract variables with functions imported and assigned to them:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; local_30h | add
 local_28h | sub
 local_20h | mul
 local_18h | div2
 local_10h | mod
 local_8h  | sup
&lt;/pre&gt;


&lt;p&gt;and also our longs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; local_68h | d1
 local_70h | d2
&lt;/pre&gt;


&lt;p&gt;We will need this to find out what calculations take place in &lt;code&gt;calc_flag__object___object&lt;/code&gt;. 
I will replace &lt;em&gt;local_xxh&lt;/em&gt; with known or chosen names.
This way the graph below should be easier to understand.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;                                                        ...
                                   | mov qword [sup], rax                       |                               
                                   | mov edi, 2                                 |                               
                                   | call sym.imp.PyLong_FromLong;[ge]          |                               
                                   | mov qword [factor], rax                    |                               
                                   | mov edi, 1                                 |                               
                                   | call sym.imp.PyLong_FromLong;[ge]          |                               
                                   | mov qword [last_factor], rax               |                               
                                   `--------------------------------------------'                               
                                                               |                                                
                                                               |                                                
     .---------------------------------------------------------.                                                
     |                                                         |                                                
     |                                                         |                                                
     |                        .------------------------------------------------------------------.              
     |                        |  0x1f69 ;[gj]                                                    |              
     |                        |      ; JMP XREF from 0x0000200d (sym.calc_flag__object___object) |              
     |                        | mov edi, 1                                                       |              
     |                        | call sym.imp.PyLong_FromLong;[ge]                                |              
     |                        | mov rdx, rax                                                     |              
     |                        | mov rcx, qword [d1]                                              |              
     |                        | mov rax, qword [sup]                                             |              
     |                        | mov rsi, rcx                                                     |              
     |                        | mov rdi, rax                                                     |              
     |                        | call sym.call__object___object___object;[gg]                     | 
     |                        | mov rdi, rax                                                     |              
     |                        | call sym.imp.PyLong_AsLong;[gh]                                  |              
     |                        | test rax, rax                                                    |              
     |                        | setne al                                                         |              
     |                        | test al, al                                                      |              
     |                        | je 0x2012;[gi]                                                   |              
     |                        `------------------------------------------------------------------'              
     |                                                             | |                                          
     |                                                             | '------------.                             
     |                    .----------------------------------------'              |                             
     |.---------------.   |                                                       |                             
     ||               |   |                                                       |                             
     ||               |   |                                                       |                             
     ||  .-----------------------------------------------.  .-----------------------------------------------.  
     ||  |  0x1f9b ;[gl]                                 |  | [0x2012] ;[gi]                                |  
     ||  |      ; JMP XREF from 0x00001fe7               |  |      ; JMP XREF from 0x00001f99               | 
     ||  |      ;   (sym.calc_flag__object___object)     |  |      ;   (sym.calc_flag__object___object)     |
     ||  | mov rdx, qword [factor]                       |  | mov rdx, qword [last_factor]                  |  
     ||  | mov rcx, qword [d1]                           |  | mov rcx, qword [d2]                           |  
     ||  | mov rax, qword [mod]                          |  | mov rax, qword [sub]                          |  
     ||  | mov rsi, rcx                                  |  | mov rsi, rcx                                  |  
     ||  | mov rdi, rax                                  |  | mov rdi, rax                                  |  
     ||  | call sym.call__object___object___object;[gg]  |  | call sym.call__object___object___object;[gg]  |  
     ||  | mov rdi, rax                                  |  | leave                                         |  
     ||  | call sym.imp.PyLong_AsLong;[gh]               |  | ret                                           |  
     ||  | test rax, rax                                 |  `-----------------------------------------------'  
     ||  | sete al                                       |                                                                      
     ||  | test al, al                                   |                                                                      
     ||  | je 0x1fe9;[gk]                                |                                                                      
     ||  `-----------------------------------------------'                                                                      
     ||                   | |                                                                                                    
     ||                   | '------------------------------------.                                                               
     ||        .----------'                                      |                                                               
     ||        |                                                 |                                                               
     ||        |                                                 |                                                               
     ||.-----------------------------------------------.   .------------------------------------------------------------------.  
     |||  0x1fc4 ;[gm]                                 |   |  0x1fe9 ;[gk]                                                    |  
     ||| mov rdx, qword [factor]                       |   |      ; JMP XREF from 0x00001fc2 (sym.calc_flag__object___object) |  
     ||| mov rcx, qword [d1]                           |   | mov edi, 1                                                       |  
     ||| mov rax, qword [div2]                         |   | call sym.imp.PyLong_FromLong;[ge]                                |  
     ||| mov rsi, rcx                                  |   | mov rdx, rax                                                     |  
     ||| mov rdi, rax                                  |   | mov rcx, qword [factor]                                          |  
     ||| call sym.call__object___object___object;[gg]  |   | mov rax, qword [add]                                             |  
     ||| mov qword [d1], rax                           |   | mov rsi, rcx                                                     |  
     ||| mov rax, qword [factor]                       |   | mov rdi, rax                                                     |  
     ||| mov qword [last_factor], rax                  |   | call sym.call__object___object___object;[gg]                     |  
     ||| jmp 0x1f9b;[gl]                               |   | mov qword [factor], rax                                          |  
     ||`-----------------------------------------------'   | jmp 0x1f69;[gj]                                                  |  
     ||    |                                               `------------------------------------------------------------------'  
     ||    |                                                   |                                                                 
     |`----'                                                   |                                                    
     `---------------------------------------------------------' 
&lt;/pre&gt;


&lt;p&gt;Calling python functions convention is to put the address of an imported function to &lt;code&gt;rdi&lt;/code&gt; register and
the address of python object with the first argument to &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt; will have the second argument address. Then there is a call to
 &lt;code&gt;sym.call__object___object___object&lt;/code&gt;, the result will be also python object which address will be in &lt;code&gt;rax&lt;/code&gt; register.&lt;/p&gt;
&lt;p&gt;The algorithm shown above could be described like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;factor = 2&lt;/code&gt; and &lt;code&gt;last_factor = 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we check if &lt;code&gt;d1&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;. If not &lt;code&gt;return d2 - last_factor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Test if &lt;code&gt;factor&lt;/code&gt; divides &lt;code&gt;d1&lt;/code&gt; with no rest. If &lt;em&gt;True&lt;/em&gt; then go to &lt;em&gt;step 4&lt;/em&gt;  else &lt;em&gt;step 5&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d1 = d1 / factor&lt;/code&gt; and save the value of &lt;code&gt;factor&lt;/code&gt; in &lt;code&gt;last_factor&lt;/code&gt; and go to &lt;em&gt;step 3&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;factor += 1&lt;/code&gt; and go to &lt;em&gt;step 2&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, when condition &lt;code&gt;d1 &amp;gt; 1&lt;/code&gt; will not be fulfilled &lt;code&gt;last_factor&lt;/code&gt; will hold the greatest
 prime factor of &lt;code&gt;d1&lt;/code&gt;. And this value will be subtracted from &lt;code&gt;d2&lt;/code&gt; and the result will be returned
 from the function. As you might already suspect running this program will give us nothing.
 So we better write our faster version of it.&lt;/p&gt;
&lt;p&gt;To get the greatest prime factor of &lt;code&gt;d1&lt;/code&gt; I will use &lt;strong&gt;&lt;a href="https://pypi.org/project/primefac/"&gt;primefac&lt;/a&gt;&lt;/strong&gt;  python library.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;primefac&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

&lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25052671110843108&lt;/span&gt;
&lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16420105858350620421142892712&lt;/span&gt;

&lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;primefac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primefac&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bigestPrime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bigestPrime&lt;/span&gt;
&lt;span class="n"&gt;flag_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And here we have the content of the flag.&lt;/p&gt;
&lt;p&gt;...&lt;strong&gt;SQUEAK&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>ctf</category><category>icon</category><category>re</category><category>reverse</category><category>writeups</category><guid>https://death-of-rats.github.io/posts/icon_2018_ctf_third_challenge/</guid><pubDate>Thu, 13 Sep 2018 22:00:00 GMT</pubDate></item><item><title>0x04 cpprest listener</title><link>https://death-of-rats.github.io/posts/cpprest-listener/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;p&gt;I want to try to build simple REST server demo with &lt;em&gt;cpprestsdk&lt;/em&gt;. It is still experimental part of the library.&lt;/p&gt;
&lt;p&gt;Let's start the program. I want to listen on &lt;em&gt;localhost&lt;/em&gt; on port 9000 with relative path &lt;em&gt;/demo&lt;/em&gt;. For now, 
the program will handle only &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt;. When the listener starts, we get a notification. 
&lt;em&gt;cpprestsdk&lt;/em&gt; uses &lt;code&gt;pplx::task&amp;lt;T&amp;gt;&lt;/code&gt; for composing asynchronous operations (&lt;code&gt;...then().then().wait()&lt;/code&gt;). The main
loop is very simple, we just &lt;code&gt;while&lt;/code&gt; infinitely.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cpprest/http_listener.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cpprest/json.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;handle_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wcout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;"[HTTP] GET&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"death of rats"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_codes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;handle_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wcout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;"[HTTP] POST&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_codes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No object in post data."&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_codes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http_listener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:9000/demo"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

    &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_get&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;listener&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;](){&lt;/span&gt;
                &lt;span class="n"&gt;wcout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;"starting to listen&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wcout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To build this code I use CMake with configuration from last post 
[&lt;a href="https://death-of-rats.github.io/posts/building-cpprest-sample/"&gt;0x03 building cpprest sample&lt;/a&gt;]. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt; &lt;span class="s"&gt;3.7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;simargl&lt;/span&gt; &lt;span class="s"&gt;C&lt;/span&gt; &lt;span class="s"&gt;CXX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;simargl_VERSION_MAJOR&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;simargl_VERSION_MINOR&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_CXX_STANDARD&lt;/span&gt; &lt;span class="s"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;CMAKE_EXPORT_COMPILE_COMMANDS&lt;/span&gt; &lt;span class="s"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;cpprestsdk&lt;/span&gt; &lt;span class="s"&gt;REQUIRED&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Boost&lt;/span&gt; &lt;span class="s"&gt;REQUIRED&lt;/span&gt; &lt;span class="s"&gt;COMPONENTS&lt;/span&gt; &lt;span class="s"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;OpenSSL&lt;/span&gt; &lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;add_executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;simargl&lt;/span&gt; &lt;span class="s"&gt;src/main.cpp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;target_link_libraries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;simargl&lt;/span&gt; &lt;span class="s"&gt;PRIVATE&lt;/span&gt;
    &lt;span class="s"&gt;cpprestsdk::cpprest&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_LIBRARIES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OPENSSL_LIBRARIES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#message("OpenSSL libs:" ${OPENSSL_LIBRARIES})&lt;/span&gt;
&lt;span class="c"&gt;#message("Boost libs :" ${Boost_LIBRARIES})&lt;/span&gt;
&lt;span class="c"&gt;#message("CppRest libs :" ${cpprestsdk_LIBRARIES})&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The build goes flawlessly. To test the cpprest listener run the program and try a few curl commands:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ curl http://localhost:9000/demo
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{"name":"death of rats","version":"0.0.1"}
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ curl --request POST --data &lt;span class="s1"&gt;'{"label":"value"}'&lt;/span&gt; -H &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt;  http://localhost:9000/demo
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{"label":"value"}
&lt;/pre&gt;


&lt;p&gt;What have I learned? If one is looking for examples, one should look up tests...&lt;/p&gt;
&lt;p&gt;...&lt;strong&gt;SQUEAK&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>cpprest</category><category>http</category><category>rest</category><category>server</category><guid>https://death-of-rats.github.io/posts/cpprest-listener/</guid><pubDate>Thu, 31 May 2018 22:00:00 GMT</pubDate></item><item><title>0x03 building cpprest sample</title><link>https://death-of-rats.github.io/posts/building-cpprest-sample/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;p&gt;One can install the &lt;a href="https://github.com/Microsoft/cpprestsdk"&gt;C++ REST SDK&lt;/a&gt; running 
&lt;code&gt;sudo apt install libcpprest-dev&lt;/code&gt;. Unfortunately after that my CMake couldn't find it. 
I have some other troubles with compiling a project with cpprest. So I change my mind and 
I built the library from the source 
(&lt;a href="https://github.com/Microsoft/cpprestsdk/wiki/How-to-build-for-Linux"&gt;instructions&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To try the new toy I choose this &lt;a href="https://github.com/Microsoft/cpprestsdk/blob/master/Release/samples/BingRequest/bingrequest.cpp"&gt;sample&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://death-of-rats.github.io/posts/building-cpprest-sample/"&gt;Read moreâ¦&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cmake</category><category>cpp</category><category>rest</category><guid>https://death-of-rats.github.io/posts/building-cpprest-sample/</guid><pubDate>Sun, 27 May 2018 22:00:00 GMT</pubDate></item><item><title>0x02 travis + nikola</title><link>https://death-of-rats.github.io/posts/travis-nikola/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;p&gt;One has running Nikola. One stores all ones work on GitHub and hosts it on the GitHub Pages. Nice. But 
do I really need to push my changes to the repo, and when I'm ready, build static pages and push them 
to the &lt;code&gt;master&lt;/code&gt;. And what if I'm not at my computer, what if I must change some typo. It would be 
nice if something could do this build and deploy the stuff for me.&lt;/p&gt;
&lt;p&gt;That is why I invite...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://death-of-rats.github.io/posts/travis-nikola/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>nikola</category><category>travis</category><category>travis-ci</category><guid>https://death-of-rats.github.io/posts/travis-nikola/</guid><pubDate>Fri, 25 May 2018 00:00:00 GMT</pubDate></item><item><title>0x01 github + nikola</title><link>https://death-of-rats.github.io/posts/github-%2B-nikola/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;p&gt;How to start GitHub repo for hosting pages with Nikola. I want a branch (let us name it &lt;code&gt;source&lt;/code&gt;) where I will keep my project. I plan to generate static files to some folder and push it to the &lt;code&gt;master&lt;/code&gt; branch. In other words, &lt;code&gt;master&lt;/code&gt; branch will have my site and &lt;code&gt;source&lt;/code&gt; branch will have the whole Nikola engine with my source files.&lt;/p&gt;
&lt;p&gt;I need to create new repo: &lt;em&gt;&lt;username&gt;.github.io&lt;/username&gt;&lt;/em&gt; on GitHub page. Next, I will clone it to the local folder, make my branch and push it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:death-of-rats/death-of-rats.github.io.git
&lt;span class="nb"&gt;cd&lt;/span&gt; death-of-rats.github.io.git
git commit --allow-empty -am &lt;span class="s2"&gt;"start using repo"&lt;/span&gt;
git branch &lt;span class="nb"&gt;source&lt;/span&gt;
git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
git push --set-upstream origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And I have the empty repo with 2 branches.&lt;/p&gt;
&lt;p&gt;Now I init the Nikola project in repo root folder (on branch &lt;code&gt;source&lt;/code&gt;). Nikola will produce html files to the &lt;code&gt;output&lt;/code&gt; folder so I need, after the first test run, split subtree for that folder and push it to &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git push origin &lt;span class="sb"&gt;`&lt;/span&gt;git subtree split --prefix output/ master&lt;span class="sb"&gt;`&lt;/span&gt;:master --force
&lt;/pre&gt;


&lt;p&gt;It's almost done. Manual deploy command may look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m &lt;span class="s2"&gt;"&amp;lt;deploy message for commit&amp;gt;"&lt;/span&gt; -S
git push origin &lt;span class="nb"&gt;source&lt;/span&gt;
git subtree push --prefix output/ origin master
&lt;/pre&gt;


&lt;p&gt;What have I missed? I didn't add &lt;code&gt;.gitignore&lt;/code&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;strong&gt;SQUEAK&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>github</category><category>nikola</category><guid>https://death-of-rats.github.io/posts/github-%2B-nikola/</guid><pubDate>Mon, 21 May 2018 07:00:30 GMT</pubDate></item><item><title>0x00 std::make_shared</title><link>https://death-of-rats.github.io/posts/std%3A%3Amake_shared/</link><dc:creator>death-of-rats</dc:creator><description>&lt;div&gt;&lt;h3&gt;This is the place...&lt;/h3&gt;
&lt;p&gt;... where I dump my RAM - thoughts I don't want to lose. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_shared&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;It's some start... not necessarily a good one.&lt;/p&gt;
&lt;p&gt;...&lt;strong&gt;SQUEAK&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>nothing</category><guid>https://death-of-rats.github.io/posts/std%3A%3Amake_shared/</guid><pubDate>Mon, 21 May 2018 00:35:21 GMT</pubDate></item></channel></rss>